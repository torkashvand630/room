var IonSDK = function (g) { var I = {}; function C(A) { if (I[A]) return I[A].exports; var c = I[A] = { i: A, l: !1, exports: {} }; return g[A].call(c.exports, c, c.exports, C), c.l = !0, c.exports } return C.m = g, C.c = I, C.d = function (g, I, A) { C.o(g, I) || Object.defineProperty(g, I, { enumerable: !0, get: A }) }, C.r = function (g) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(g, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(g, "__esModule", { value: !0 }) }, C.t = function (g, I) { if (1 & I && (g = C(g)), 8 & I) return g; if (4 & I && "object" == typeof g && g && g.__esModule) return g; var A = Object.create(null); if (C.r(A), Object.defineProperty(A, "default", { enumerable: !0, value: g }), 2 & I && "string" != typeof g) for (var c in g) C.d(A, c, function (I) { return g[I] }.bind(null, c)); return A }, C.n = function (g) { var I = g && g.__esModule ? function () { return g.default } : function () { return g }; return C.d(I, "a", I), I }, C.o = function (g, I) { return Object.prototype.hasOwnProperty.call(g, I) }, C.p = "", C(C.s = 1) }([function (module, exports, __webpack_require__) { "use strict"; eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.makeRemote = exports.LocalStream = exports.VideoConstraints = void 0;\r\nconst resolutions = ['qvga', 'vga', 'shd', 'hd', 'fhd', 'qhd'];\r\nexports.VideoConstraints = {\r\n    qvga: {\r\n        resolution: {\r\n            width: { ideal: 320 },\r\n            height: { ideal: 180 },\r\n            frameRate: {\r\n                ideal: 15,\r\n                max: 30,\r\n            },\r\n        },\r\n        encodings: {\r\n            maxBitrate: 150000,\r\n            maxFramerate: 15.0,\r\n        },\r\n    },\r\n    vga: {\r\n        resolution: {\r\n            width: { ideal: 640 },\r\n            height: { ideal: 360 },\r\n            frameRate: {\r\n                ideal: 30,\r\n                max: 60,\r\n            },\r\n        },\r\n        encodings: {\r\n            maxBitrate: 500000,\r\n            maxFramerate: 30.0,\r\n        },\r\n    },\r\n    shd: {\r\n        resolution: {\r\n            width: { ideal: 960 },\r\n            height: { ideal: 540 },\r\n            frameRate: {\r\n                ideal: 30,\r\n                max: 60,\r\n            },\r\n        },\r\n        encodings: {\r\n            maxBitrate: 1200000,\r\n            maxFramerate: 30.0,\r\n        },\r\n    },\r\n    hd: {\r\n        resolution: {\r\n            width: { ideal: 1280 },\r\n            height: { ideal: 720 },\r\n            frameRate: {\r\n                ideal: 30,\r\n                max: 60,\r\n            },\r\n        },\r\n        encodings: {\r\n            maxBitrate: 2500000,\r\n            maxFramerate: 30.0,\r\n        },\r\n    },\r\n    fhd: {\r\n        resolution: {\r\n            width: { ideal: 1920 },\r\n            height: { ideal: 1080 },\r\n            frameRate: {\r\n                ideal: 30,\r\n                max: 60,\r\n            },\r\n        },\r\n        encodings: {\r\n            maxBitrate: 4000000,\r\n            maxFramerate: 30.0,\r\n        },\r\n    },\r\n    qhd: {\r\n        resolution: {\r\n            width: { ideal: 2560 },\r\n            height: { ideal: 1440 },\r\n            frameRate: {\r\n                ideal: 30,\r\n                max: 60,\r\n            },\r\n        },\r\n        encodings: {\r\n            maxBitrate: 8000000,\r\n            maxFramerate: 30.0,\r\n        },\r\n    },\r\n};\r\nconst defaults = {\r\n    resolution: 'hd',\r\n    codec: 'vp8',\r\n    audio: true,\r\n    video: true,\r\n    simulcast: false,\r\n};\r\nclass LocalStream extends MediaStream {\r\n    constructor(stream, constraints) {\r\n        super(stream);\r\n        this.constraints = constraints;\r\n    }\r\n    static async getUserMedia(constraints = defaults) {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n            audio: LocalStream.computeAudioConstraints({\r\n                ...defaults,\r\n                ...constraints,\r\n            }),\r\n            video: LocalStream.computeVideoConstraints({\r\n                ...defaults,\r\n                ...constraints,\r\n            }),\r\n        });\r\n        return new LocalStream(stream, {\r\n            ...defaults,\r\n            ...constraints,\r\n        });\r\n    }\r\n    static async getDisplayMedia(constraints = {\r\n        codec: 'vp8',\r\n        resolution: 'hd',\r\n        audio: true,\r\n        video: true,\r\n        simulcast: false,\r\n    }) {\r\n        // @ts-ignore\r\n        const stream = await navigator.mediaDevices.getDisplayMedia({\r\n            video: true, audio: true \r\n        });\r\n        return new LocalStream(stream, {\r\n            ...defaults,\r\n            ...constraints,\r\n        });\r\n    }\r\n    static computeAudioConstraints(constraints) {\r\n        return constraints.audio;\r\n    }\r\n    static computeVideoConstraints(constraints) {\r\n        if (constraints.video instanceof Object) {\r\n            return constraints.video;\r\n        }\r\n        else if (constraints.video && constraints.resolution) {\r\n            return {\r\n                ...exports.VideoConstraints[constraints.resolution].resolution,\r\n            };\r\n        }\r\n        return constraints.video;\r\n    }\r\n    getTrack(kind) {\r\n        let tracks;\r\n        if (kind === 'video') {\r\n            tracks = this.getVideoTracks();\r\n            return tracks.length > 0 ? this.getVideoTracks()[0] : undefined;\r\n        }\r\n        tracks = this.getAudioTracks();\r\n        return tracks.length > 0 ? this.getAudioTracks()[0] : undefined;\r\n    }\r\n    async getNewTrack(kind) {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n            [kind]: kind === 'video'\r\n                ? LocalStream.computeVideoConstraints(this.constraints)\r\n                : LocalStream.computeAudioConstraints(this.constraints),\r\n        });\r\n        return stream.getTracks()[0];\r\n    }\r\n    publishTrack(track) {\r\n        if (this.pc) {\r\n            if (track.kind === 'video' && this.constraints.simulcast) {\r\n                const idx = resolutions.indexOf(this.constraints.resolution);\r\n                const encodings = [\r\n                    {\r\n                        rid: 'f',\r\n                        maxBitrate: exports.VideoConstraints[resolutions[idx]].encodings.maxBitrate,\r\n                        maxFramerate: exports.VideoConstraints[resolutions[idx]].encodings.maxFramerate,\r\n                    },\r\n                ];\r\n                if (idx - 1 >= 0) {\r\n                    encodings.push({\r\n                        rid: 'h',\r\n                        scaleResolutionDownBy: 2.0,\r\n                        maxBitrate: exports.VideoConstraints[resolutions[idx - 1]].encodings.maxBitrate,\r\n                        maxFramerate: exports.VideoConstraints[resolutions[idx - 1]].encodings.maxFramerate,\r\n                    });\r\n                }\r\n                if (idx - 2 >= 0) {\r\n                    encodings.push({\r\n                        rid: 'q',\r\n                        scaleResolutionDownBy: 4.0,\r\n                        maxBitrate: exports.VideoConstraints[resolutions[idx - 2]].encodings.maxBitrate,\r\n                        maxFramerate: exports.VideoConstraints[resolutions[idx - 2]].encodings.maxFramerate,\r\n                    });\r\n                }\r\n                const transceiver = this.pc.addTransceiver(track, {\r\n                    streams: [this],\r\n                    direction: 'sendonly',\r\n                    sendEncodings: encodings,\r\n                });\r\n                this.setPreferredCodec(transceiver);\r\n            }\r\n            else {\r\n                const transceiver = this.pc.addTransceiver(track, {\r\n                    streams: [this],\r\n                    direction: 'sendonly',\r\n                    sendEncodings: track.kind === 'video' ? [exports.VideoConstraints[this.constraints.resolution].encodings] : undefined,\r\n                });\r\n                if (track.kind === 'video') {\r\n                    this.setPreferredCodec(transceiver);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setPreferredCodec(transceiver) {\r\n        if ('setCodecPreferences' in transceiver) {\r\n            const cap = RTCRtpSender.getCapabilities('video');\r\n            if (!cap)\r\n                return;\r\n            const selCodec = cap.codecs.find((c) => c.mimeType === `video/${this.constraints.codec.toUpperCase()}` || c.mimeType === `audio/OPUS`);\r\n            if (selCodec) {\r\n                transceiver.setCodecPreferences([selCodec]);\r\n            }\r\n        }\r\n    }\r\n    updateTrack(next, prev) {\r\n        this.addTrack(next);\r\n        // If published, replace published track with track from new device\r\n        if (prev) {\r\n            this.removeTrack(prev);\r\n            prev.stop();\r\n            if (this.pc) {\r\n                this.pc.getSenders().forEach(async (sender) => {\r\n                    var _a, _b;\r\n                    if (((_a = sender === null || sender === void 0 ? void 0 : sender.track) === null || _a === void 0 ? void 0 : _a.kind) === next.kind) {\r\n                        (_b = sender.track) === null || _b === void 0 ? void 0 : _b.stop();\r\n                        sender.replaceTrack(next);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.addTrack(next);\r\n            if (this.pc) {\r\n                this.publishTrack(next);\r\n            }\r\n        }\r\n    }\r\n    publish(pc) {\r\n        this.pc = pc;\r\n        this.getTracks().forEach(this.publishTrack.bind(this));\r\n    }\r\n    unpublish() {\r\n        if (this.pc) {\r\n            const tracks = this.getTracks();\r\n            this.pc.getSenders().forEach((s) => {\r\n                if (s.track && tracks.includes(s.track)) {\r\n                    this.pc.removeTrack(s);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    async switchDevice(kind, deviceId) {\r\n        this.constraints = {\r\n            ...this.constraints,\r\n            [kind]: this.constraints[kind] instanceof Object\r\n                ? {\r\n                    ...this.constraints[kind],\r\n                    deviceId,\r\n                }\r\n                : { deviceId },\r\n        };\r\n        const prev = this.getTrack(kind);\r\n        const next = await this.getNewTrack(kind);\r\n        this.updateTrack(next, prev);\r\n    }\r\n    mute(kind) {\r\n        const track = this.getTrack(kind);\r\n        if (track) {\r\n            track.stop();\r\n        }\r\n    }\r\n    async unmute(kind) {\r\n        const prev = this.getTrack(kind);\r\n        const track = await this.getNewTrack(kind);\r\n        this.updateTrack(track, prev);\r\n    }\r\n}\r\nexports.LocalStream = LocalStream;\r\nfunction makeRemote(stream, transport) {\r\n    const remote = stream;\r\n    remote.audio = true;\r\n    remote.video = 'none';\r\n    remote._videoPreMute = 'high';\r\n    const select = () => {\r\n        const call = {\r\n            streamId: remote.id,\r\n            video: remote.video,\r\n            audio: remote.audio,\r\n        };\r\n        if (transport.api) {\r\n            if (transport.api.readyState !== 'open') {\r\n                // queue call if we aren't open yet\r\n                transport.api.onopen = () => { var _a; return (_a = transport.api) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(call)); };\r\n            }\r\n            else {\r\n                transport.api.send(JSON.stringify(call));\r\n            }\r\n        }\r\n    };\r\n    remote.preferLayer = (layer) => {\r\n        remote.video = layer;\r\n        select();\r\n    };\r\n    remote.mute = (kind) => {\r\n        if (kind === 'audio') {\r\n            remote.audio = false;\r\n        }\r\n        else if (kind === 'video') {\r\n            remote._videoPreMute = remote.video;\r\n            remote.video = 'none';\r\n        }\r\n        select();\r\n    };\r\n    remote.unmute = (kind) => {\r\n        if (kind === 'audio') {\r\n            remote.audio = true;\r\n        }\r\n        else if (kind === 'video') {\r\n            remote.video = remote._videoPreMute;\r\n        }\r\n        select();\r\n    };\r\n    return remote;\r\n}\r\nexports.makeRemote = makeRemote;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.LocalStream = exports.Client = void 0;\r\nconst client_1 = __webpack_require__(2);\r\nexports.Client = client_1.default;\r\nconst stream_1 = __webpack_require__(0);\r\nObject.defineProperty(exports, "LocalStream", { enumerable: true, get: function () { return stream_1.LocalStream; } });\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Jb25TREsvLi9zcmMvaW5kZXgudHM/NzFiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsQ0FBVTtBQUNuQztBQUNBLGlCQUFpQixtQkFBTyxDQUFDLENBQVU7QUFDbkMsK0NBQStDLHFDQUFxQyw2QkFBNkIsRUFBRSxFQUFFIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkxvY2FsU3RyZWFtID0gZXhwb3J0cy5DbGllbnQgPSB2b2lkIDA7XHJcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIi4vY2xpZW50XCIpO1xyXG5leHBvcnRzLkNsaWVudCA9IGNsaWVudF8xLmRlZmF1bHQ7XHJcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcIi4vc3RyZWFtXCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb2NhbFN0cmVhbVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RyZWFtXzEuTG9jYWxTdHJlYW07IH0gfSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Transport = void 0;\r\nconst stream_1 = __webpack_require__(0);\r\nconst API_CHANNEL = 'ion-sfu';\r\nconst ERR_NO_SESSION = 'no active session, join first';\r\nvar Role;\r\n(function (Role) {\r\n    Role[Role[\"pub\"] = 0] = \"pub\";\r\n    Role[Role[\"sub\"] = 1] = \"sub\";\r\n})(Role || (Role = {}));\r\nclass Transport {\r\n    constructor(role, signal, config) {\r\n        this.signal = signal;\r\n        this.pc = new RTCPeerConnection(config);\r\n        this.candidates = [];\r\n        if (role === Role.pub) {\r\n            this.pc.createDataChannel(API_CHANNEL);\r\n        }\r\n        this.pc.onicecandidate = ({ candidate }) => {\r\n            if (candidate) {\r\n                this.signal.trickle({ target: role, candidate });\r\n            }\r\n        };\r\n    }\r\n}\r\nexports.Transport = Transport;\r\nclass Client {\r\n    constructor(signal, config = {\r\n        codec: 'vp8',\r\n        iceServers: [\r\n            {\r\n                urls: [\r\n  'stun:stun.l.google.com:19302'   ],\r\n            },\r\n        ],\r\n    }) {\r\n        this.signal = signal;\r\n        this.config = config;\r\n        signal.onnegotiate = this.negotiate.bind(this);\r\n        signal.ontrickle = this.trickle.bind(this);\r\n    }\r\n    async join(sid) {\r\n        this.transports = {\r\n            [Role.pub]: new Transport(Role.pub, this.signal, this.config),\r\n            [Role.sub]: new Transport(Role.sub, this.signal, this.config),\r\n        };\r\n        this.transports[Role.sub].pc.ontrack = (ev) => {\r\n            const stream = ev.streams[0];\r\n            const remote = stream_1.makeRemote(stream, this.transports[Role.sub]);\r\n            if (this.ontrack) {\r\n                this.ontrack(ev.track, remote);\r\n            }\r\n        };\r\n        this.transports[Role.sub].pc.ondatachannel = (ev) => {\r\n            if (ev.channel.label === API_CHANNEL) {\r\n                this.transports[Role.sub].api = ev.channel;\r\n                return;\r\n            }\r\n            if (this.ondatachannel) {\r\n                this.ondatachannel(ev);\r\n            }\r\n        };\r\n        const offer = await this.transports[Role.pub].pc.createOffer();\r\n        await this.transports[Role.pub].pc.setLocalDescription(offer);\r\n        const answer = await this.signal.join(sid, offer);\r\n        await this.transports[Role.pub].pc.setRemoteDescription(answer);\r\n        this.transports[Role.pub].candidates.forEach((c) => this.transports[Role.pub].pc.addIceCandidate(c));\r\n        this.transports[Role.pub].pc.onnegotiationneeded = this.onNegotiationNeeded.bind(this);\r\n    }\r\n    leave() {\r\n        if (this.transports) {\r\n            Object.values(this.transports).forEach((t) => t.pc.close());\r\n            delete this.transports;\r\n        }\r\n    }\r\n    getPubStats(selector) {\r\n        if (!this.transports) {\r\n            throw Error(ERR_NO_SESSION);\r\n        }\r\n        return this.transports[Role.pub].pc.getStats(selector);\r\n    }\r\n    getSubStats(selector) {\r\n        if (!this.transports) {\r\n            throw Error(ERR_NO_SESSION);\r\n        }\r\n        return this.transports[Role.sub].pc.getStats(selector);\r\n    }\r\n    publish(stream) {\r\n        if (!this.transports) {\r\n            throw Error(ERR_NO_SESSION);\r\n        }\r\n        stream.publish(this.transports[Role.pub].pc);\r\n    }\r\n    createDataChannel(label) {\r\n        if (!this.transports) {\r\n            throw Error(ERR_NO_SESSION);\r\n        }\r\n        return this.transports[Role.pub].pc.createDataChannel(label);\r\n    }\r\n    close() {\r\n        if (this.transports) {\r\n            Object.values(this.transports).forEach((t) => t.pc.close());\r\n        }\r\n        this.signal.close();\r\n    }\r\n    trickle({ candidate, target }) {\r\n        if (!this.transports) {\r\n            throw Error(ERR_NO_SESSION);\r\n        }\r\n        if (this.transports[target].pc.remoteDescription) {\r\n            this.transports[target].pc.addIceCandidate(candidate);\r\n        }\r\n        else {\r\n            this.transports[target].candidates.push(candidate);\r\n        }\r\n    }\r\n    async negotiate(description) {\r\n        if (!this.transports) {\r\n            throw Error(ERR_NO_SESSION);\r\n        }\r\n        try {\r\n            await this.transports[Role.sub].pc.setRemoteDescription(description);\r\n            this.transports[Role.sub].candidates.forEach((c) => this.transports[Role.sub].pc.addIceCandidate(c));\r\n            this.transports[Role.sub].candidates = [];\r\n            const answer = await this.transports[Role.sub].pc.createAnswer();\r\n            await this.transports[Role.sub].pc.setLocalDescription(answer);\r\n            this.signal.answer(answer);\r\n        }\r\n        catch (err) {\r\n            /* tslint:disable-next-line:no-console */\r\n            console.error(err);\r\n        }\r\n    }\r\n    async onNegotiationNeeded() {\r\n        if (!this.transports) {\r\n            throw Error(ERR_NO_SESSION);\r\n        }\r\n        try {\r\n            const offer = await this.transports[Role.pub].pc.createOffer();\r\n            await this.transports[Role.pub].pc.setLocalDescription(offer);\r\n            const answer = await this.signal.offer(offer);\r\n            await this.transports[Role.pub].pc.setRemoteDescription(answer);\r\n        }\r\n        catch (err) {\r\n            /* tslint:disable-next-line:no-console */\r\n            console.error(err);\r\n        }\r\n    }\r\n}\r\nexports.default = Client;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}]);